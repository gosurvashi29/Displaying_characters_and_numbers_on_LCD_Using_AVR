
lcd1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000124  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000124  00000198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000198  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000082  00000000  00000000  00000864  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  000008e6  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000915  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000002df  00000000  00000000  0000094d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000139  00000000  00000000  00000c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001dd  00000000  00000000  00000d65  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00000f44  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000011d  00000000  00000000  00000f98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000004c  00000000  00000000  000010b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001101  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 83 00 	call	0x106	; 0x106 <main>
  64:	0c 94 90 00 	jmp	0x120	; 0x120 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <_Z8disp_cmdj>:
	disp_cmd(0X06);
}

void disp_cmd(unsigned int cmd)
{
	PORTB=((cmd & 0XF0)+0X04);
  6c:	9c 01       	movw	r18, r24
  6e:	20 7f       	andi	r18, 0xF0	; 240
  70:	33 27       	eor	r19, r19
  72:	2c 5f       	subi	r18, 0xFC	; 252
  74:	28 bb       	out	0x18, r18	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  76:	e9 ef       	ldi	r30, 0xF9	; 249
  78:	f0 e0       	ldi	r31, 0x00	; 0
  7a:	31 97       	sbiw	r30, 0x01	; 1
  7c:	f1 f7       	brne	.-4      	; 0x7a <_Z8disp_cmdj+0xe>
  7e:	00 c0       	rjmp	.+0      	; 0x80 <_Z8disp_cmdj+0x14>
  80:	00 00       	nop
	_delay_ms(1);
	PORTB=PORTB - 0X04;
  82:	98 b3       	in	r25, 0x18	; 24
  84:	94 50       	subi	r25, 0x04	; 4
  86:	98 bb       	out	0x18, r25	; 24
	PORTB=(((cmd<<4)& 0XF0)+0X04);
  88:	82 95       	swap	r24
  8a:	80 7f       	andi	r24, 0xF0	; 240
  8c:	8c 5f       	subi	r24, 0xFC	; 252
  8e:	88 bb       	out	0x18, r24	; 24
  90:	89 ef       	ldi	r24, 0xF9	; 249
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	01 97       	sbiw	r24, 0x01	; 1
  96:	f1 f7       	brne	.-4      	; 0x94 <_Z8disp_cmdj+0x28>
  98:	00 c0       	rjmp	.+0      	; 0x9a <_Z8disp_cmdj+0x2e>
  9a:	00 00       	nop
	_delay_ms(1);
	PORTB=PORTB-0X04;
  9c:	88 b3       	in	r24, 0x18	; 24
  9e:	84 50       	subi	r24, 0x04	; 4
  a0:	88 bb       	out	0x18, r24	; 24
  a2:	08 95       	ret

000000a4 <_Z8lcd_initv>:
		return 0;
}

void lcd_init()
{
	disp_cmd(0X02);
  a4:	82 e0       	ldi	r24, 0x02	; 2
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	0e 94 36 00 	call	0x6c	; 0x6c <_Z8disp_cmdj>
	disp_cmd(0X28);
  ac:	88 e2       	ldi	r24, 0x28	; 40
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	0e 94 36 00 	call	0x6c	; 0x6c <_Z8disp_cmdj>
	disp_cmd(0X0C);
  b4:	8c e0       	ldi	r24, 0x0C	; 12
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	0e 94 36 00 	call	0x6c	; 0x6c <_Z8disp_cmdj>
	disp_cmd(0X06);
  bc:	86 e0       	ldi	r24, 0x06	; 6
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	0e 94 36 00 	call	0x6c	; 0x6c <_Z8disp_cmdj>
  c4:	08 95       	ret

000000c6 <_Z9disp_datai>:
	PORTB=PORTB-0X04;
	
}
void disp_data( int cmd)
{
	PORTB=((cmd  & 0XF0)+0X05);
  c6:	9c 01       	movw	r18, r24
  c8:	20 7f       	andi	r18, 0xF0	; 240
  ca:	33 27       	eor	r19, r19
  cc:	2b 5f       	subi	r18, 0xFB	; 251
  ce:	28 bb       	out	0x18, r18	; 24
  d0:	e9 ef       	ldi	r30, 0xF9	; 249
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	31 97       	sbiw	r30, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <_Z9disp_datai+0xe>
  d8:	00 c0       	rjmp	.+0      	; 0xda <_Z9disp_datai+0x14>
  da:	00 00       	nop
	_delay_ms(1);
	PORTB=PORTB - 0X05;
  dc:	28 b3       	in	r18, 0x18	; 24
  de:	25 50       	subi	r18, 0x05	; 5
  e0:	28 bb       	out	0x18, r18	; 24
	PORTB=(((cmd <<4)& 0XF0)+0X05);
  e2:	82 95       	swap	r24
  e4:	92 95       	swap	r25
  e6:	90 7f       	andi	r25, 0xF0	; 240
  e8:	98 27       	eor	r25, r24
  ea:	80 7f       	andi	r24, 0xF0	; 240
  ec:	98 27       	eor	r25, r24
  ee:	8b 5f       	subi	r24, 0xFB	; 251
  f0:	88 bb       	out	0x18, r24	; 24
  f2:	89 ef       	ldi	r24, 0xF9	; 249
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <_Z9disp_datai+0x30>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <_Z9disp_datai+0x36>
  fc:	00 00       	nop
	_delay_ms(1);
	PORTB=PORTB-0X05;
  fe:	88 b3       	in	r24, 0x18	; 24
 100:	85 50       	subi	r24, 0x05	; 5
 102:	88 bb       	out	0x18, r24	; 24
 104:	08 95       	ret

00000106 <main>:
void lcd_init();
void disp_cmd(unsigned int cmd);
void disp_data(int cmd);
int main(void)
{
	DDRB = 0XFF;
 106:	8f ef       	ldi	r24, 0xFF	; 255
 108:	87 bb       	out	0x17, r24	; 23
	lcd_init();
 10a:	0e 94 52 00 	call	0xa4	; 0xa4 <_Z8lcd_initv>
    while(1)
    {
		disp_cmd(0X84);
 10e:	84 e8       	ldi	r24, 0x84	; 132
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	0e 94 36 00 	call	0x6c	; 0x6c <_Z8disp_cmdj>
		disp_data(65);
 116:	81 e4       	ldi	r24, 0x41	; 65
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	0e 94 63 00 	call	0xc6	; 0xc6 <_Z9disp_datai>
 11e:	f7 cf       	rjmp	.-18     	; 0x10e <main+0x8>

00000120 <_exit>:
 120:	f8 94       	cli

00000122 <__stop_program>:
 122:	ff cf       	rjmp	.-2      	; 0x122 <__stop_program>
